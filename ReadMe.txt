目录：
1. com.cdl.headfirst.duckexample：是策略模式例子
2. com.cdl.headfirst.observerexample：是观察者模式例子
3. com.cdl.headfirst.decoratorexample：是装饰者模式例子
4. com.cdl.headfirst.factoryexample：是工厂模式例子
5. com.cdl.headfirst.singletonexample：是单件模式例子

设计模式种类：
1.策略模式：策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法发的客户；
2.观察这模式：观察者模式提供了一种对象设计，让主题和观察者之间松耦合，松耦合的设计之所以能让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的相互依赖降到了最低。在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖他的对象都会收到通知，并自动更新；
3.装饰者模式：装饰者模式动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。（符合开启 - 关闭模式原则）；
4.工厂模式：工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类；抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类；
5.单件模式：单件模式确保一个类只有一个实例，并提供一个全局访问点；

设计模式笔记：
一、设计原则：
1.找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。
  具体解释：把会变化的部分取出并封装起来，以便以后可以轻易的改动或扩充此部分，而不影响不需要变化的部分。

2.针对接口编程，而不是针对实现编程。
  具体解释：针对接口编程真正的意思是，“针对超类型（supertype）编程”，利用多态。

3.多用组合，少用继承。

4.为了交互对象之间的松耦合设计而努力

5.类应该对扩展开放，对修改关闭（开启 - 关闭原则）

6.要依赖抽象，不要依赖具体类（依赖倒置原则：1.变量不可以持有具体类的引用；2.不要让类派生自具体类；3.不要覆盖基类中已实现的方法；）

7.抽象工厂模式经常以工厂方法模式来实现

8.工厂方法模式用继承（继承待定？）

9.抽象工厂模式是通过对象组合（接口）

10.单件模式解决多线程并发方法：1.同步getInstance()方法；2.急切实例化；3.双重检查加锁；





